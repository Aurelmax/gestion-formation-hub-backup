import { execSync } from 'child_process';
import * as fs from 'fs';
import * as path from 'path';

/**
 * Validation finale compl√®te de toutes les vuln√©rabilit√©s de s√©curit√©
 */

interface SecurityCheck {
  name: string;
  status: '‚úÖ' | '‚ùå' | '‚ö†Ô∏è';
  description: string;
  impact: 'CRITIQUE' | '√âLEV√â' | 'MOYEN' | 'FAIBLE';
  score: number;
}

function validateFinalSecurity() {
  console.log('üõ°Ô∏è VALIDATION FINALE COMPL√àTE DE LA S√âCURIT√â');
  console.log('============================================');
  console.log('V√©rification de toutes les vuln√©rabilit√©s identifi√©es...\n');

  const securityChecks: SecurityCheck[] = [];

  // 1. V√©rification de la configuration TypeScript
  console.log('1Ô∏è‚É£ Configuration TypeScript Permissive (Niveau: MOYEN)');
  try {
    const configFiles = ['tsconfig.json', 'tsconfig.app.json', 'tsconfig.node.json'];
    let allConfigsStrict = true;

    configFiles.forEach(configFile => {
      const configPath = path.join(process.cwd(), configFile);
      const configContent = fs.readFileSync(configPath, 'utf8');
      const config = JSON.parse(configContent);
      
      const compilerOptions = config.compilerOptions || {};
      const isStrict = compilerOptions.strict === true && 
                      compilerOptions.noImplicitAny === true && 
                      compilerOptions.strictNullChecks === true;

      if (!isStrict) {
        allConfigsStrict = false;
      }
    });

    if (allConfigsStrict) {
      securityChecks.push({
        name: 'Configuration TypeScript Stricte',
        status: '‚úÖ',
        description: 'Mode strict activ√©, types stricts, null checks',
        impact: 'MOYEN',
        score: 100
      });
      console.log('  ‚úÖ Configuration TypeScript s√©curis√©e');
    } else {
      securityChecks.push({
        name: 'Configuration TypeScript Stricte',
        status: '‚ùå',
        description: 'Configuration permissive d√©tect√©e',
        impact: 'MOYEN',
        score: 0
      });
      console.log('  ‚ùå Configuration TypeScript permissive');
    }
  } catch (error) {
    securityChecks.push({
      name: 'Configuration TypeScript Stricte',
      status: '‚ùå',
      description: 'Erreur lors de la v√©rification',
      impact: 'MOYEN',
      score: 0
    });
    console.log('  ‚ùå Erreur lors de la v√©rification TypeScript');
  }

  // 2. V√©rification de la gestion des secrets
  console.log('\n2Ô∏è‚É£ Gestion des Secrets (Niveau: CRITIQUE)');
  try {
    const secureEnvPath = path.join(process.cwd(), 'app/lib/secure-env.ts');
    if (fs.existsSync(secureEnvPath)) {
      securityChecks.push({
        name: 'Gestion S√©curis√©e des Secrets',
        status: '‚úÖ',
        description: 'Utilitaire SecureEnv impl√©ment√©',
        impact: 'CRITIQUE',
        score: 100
      });
      console.log('  ‚úÖ Gestion s√©curis√©e des secrets impl√©ment√©e');
    } else {
      securityChecks.push({
        name: 'Gestion S√©curis√©e des Secrets',
        status: '‚ùå',
        description: 'Utilitaire SecureEnv manquant',
        impact: 'CRITIQUE',
        score: 0
      });
      console.log('  ‚ùå Gestion s√©curis√©e des secrets manquante');
    }
  } catch (error) {
    securityChecks.push({
      name: 'Gestion S√©curis√©e des Secrets',
      status: '‚ùå',
      description: 'Erreur lors de la v√©rification',
      impact: 'CRITIQUE',
      score: 0
    });
    console.log('  ‚ùå Erreur lors de la v√©rification des secrets');
  }

  // 3. V√©rification de l'authentification Clerk
  console.log('\n3Ô∏è‚É£ Authentification Clerk (Niveau: CRITIQUE)');
  try {
    const clerkProviderPath = path.join(process.cwd(), 'app/layout.tsx');
    const clerkProviderContent = fs.readFileSync(clerkProviderPath, 'utf8');
    
    if (clerkProviderContent.includes('ClerkProvider')) {
      securityChecks.push({
        name: 'Authentification Clerk',
        status: '‚úÖ',
        description: 'ClerkProvider int√©gr√©',
        impact: 'CRITIQUE',
        score: 100
      });
      console.log('  ‚úÖ Authentification Clerk int√©gr√©e');
    } else {
      securityChecks.push({
        name: 'Authentification Clerk',
        status: '‚ùå',
        description: 'ClerkProvider manquant',
        impact: 'CRITIQUE',
        score: 0
      });
      console.log('  ‚ùå Authentification Clerk manquante');
    }
  } catch (error) {
    securityChecks.push({
      name: 'Authentification Clerk',
      status: '‚ùå',
      description: 'Erreur lors de la v√©rification',
      impact: 'CRITIQUE',
      score: 0
    });
    console.log('  ‚ùå Erreur lors de la v√©rification Clerk');
  }

  // 4. V√©rification de la protection des API
  console.log('\n4Ô∏è‚É£ Protection des API Endpoints (Niveau: CRITIQUE)');
  try {
    const apiAuthPath = path.join(process.cwd(), 'app/lib/api-auth.ts');
    if (fs.existsSync(apiAuthPath)) {
      securityChecks.push({
        name: 'Protection des API Endpoints',
        status: '‚úÖ',
        description: 'Utilitaire api-auth impl√©ment√©',
        impact: 'CRITIQUE',
        score: 100
      });
      console.log('  ‚úÖ Protection des API endpoints impl√©ment√©e');
    } else {
      securityChecks.push({
        name: 'Protection des API Endpoints',
        status: '‚ùå',
        description: 'Protection des API manquante',
        impact: 'CRITIQUE',
        score: 0
      });
      console.log('  ‚ùå Protection des API endpoints manquante');
    }
  } catch (error) {
    securityChecks.push({
      name: 'Protection des API Endpoints',
      status: '‚ùå',
      description: 'Erreur lors de la v√©rification',
      impact: 'CRITIQUE',
      score: 0
    });
    console.log('  ‚ùå Erreur lors de la v√©rification des API');
  }

  // 5. V√©rification de la configuration Next.js Image
  console.log('\n5Ô∏è‚É£ Configuration Next.js Image (Niveau: MOYEN)');
  try {
    const nextConfigPath = path.join(process.cwd(), 'next.config.mjs');
    const nextConfigContent = fs.readFileSync(nextConfigPath, 'utf8');
    
    if (nextConfigContent.includes('images') && nextConfigContent.includes('remotePatterns')) {
      securityChecks.push({
        name: 'Configuration Next.js Image',
        status: '‚úÖ',
        description: 'Configuration des images s√©curis√©e',
        impact: 'MOYEN',
        score: 100
      });
      console.log('  ‚úÖ Configuration Next.js Image s√©curis√©e');
    } else {
      securityChecks.push({
        name: 'Configuration Next.js Image',
        status: '‚ùå',
        description: 'Configuration des images manquante',
        impact: 'MOYEN',
        score: 0
      });
      console.log('  ‚ùå Configuration Next.js Image manquante');
    }
  } catch (error) {
    securityChecks.push({
      name: 'Configuration Next.js Image',
      status: '‚ùå',
      description: 'Erreur lors de la v√©rification',
      impact: 'MOYEN',
      score: 0
    });
    console.log('  ‚ùå Erreur lors de la v√©rification Next.js Image');
  }

  // 6. V√©rification du middleware de s√©curit√©
  console.log('\n6Ô∏è‚É£ Middleware de S√©curit√© (Niveau: CRITIQUE)');
  try {
    const middlewarePath = path.join(process.cwd(), 'middleware.ts');
    if (fs.existsSync(middlewarePath)) {
      securityChecks.push({
        name: 'Middleware de S√©curit√©',
        status: '‚úÖ',
        description: 'Middleware de s√©curit√© impl√©ment√©',
        impact: 'CRITIQUE',
        score: 100
      });
      console.log('  ‚úÖ Middleware de s√©curit√© impl√©ment√©');
    } else {
      securityChecks.push({
        name: 'Middleware de S√©curit√©',
        status: '‚ùå',
        description: 'Middleware de s√©curit√© manquant',
        impact: 'CRITIQUE',
        score: 0
      });
      console.log('  ‚ùå Middleware de s√©curit√© manquant');
    }
  } catch (error) {
    securityChecks.push({
      name: 'Middleware de S√©curit√©',
      status: '‚ùå',
      description: 'Erreur lors de la v√©rification',
      impact: 'CRITIQUE',
      score: 0
    });
    console.log('  ‚ùå Erreur lors de la v√©rification du middleware');
  }

  // 7. V√©rification des vuln√©rabilit√©s XSS
  console.log('\n7Ô∏è‚É£ Vuln√©rabilit√©s XSS (Niveau: MOYEN)');
  try {
    const htmlSanitizerPath = path.join(process.cwd(), 'app/lib/html-sanitizer.ts');
    if (fs.existsSync(htmlSanitizerPath)) {
      securityChecks.push({
        name: 'Protection XSS',
        status: '‚úÖ',
        description: 'Utilitaire de sanitisation HTML impl√©ment√©',
        impact: 'MOYEN',
        score: 85
      });
      console.log('  ‚úÖ Protection XSS impl√©ment√©e');
    } else {
      securityChecks.push({
        name: 'Protection XSS',
        status: '‚ùå',
        description: 'Protection XSS manquante',
        impact: 'MOYEN',
        score: 0
      });
      console.log('  ‚ùå Protection XSS manquante');
    }
  } catch (error) {
    securityChecks.push({
      name: 'Protection XSS',
      status: '‚ùå',
      description: 'Erreur lors de la v√©rification',
      impact: 'MOYEN',
      score: 0
    });
    console.log('  ‚ùå Erreur lors de la v√©rification XSS');
  }

  // R√©sum√© de s√©curit√©
  console.log('\nüìä R√âSUM√â FINAL DE S√âCURIT√â');
  console.log('============================');

  const totalChecks = securityChecks.length;
  const passedChecks = securityChecks.filter(check => check.status === '‚úÖ').length;
  const failedChecks = securityChecks.filter(check => check.status === '‚ùå').length;
  const warningChecks = securityChecks.filter(check => check.status === '‚ö†Ô∏è').length;

  // Calcul du score pond√©r√©
  const totalScore = securityChecks.reduce((sum, check) => sum + check.score, 0);
  const maxScore = totalChecks * 100;
  const securityScore = Math.round((totalScore / maxScore) * 100);

  console.log(`\nüìà Statistiques:`);
  console.log(`  ‚úÖ V√©rifications r√©ussies: ${passedChecks}/${totalChecks}`);
  console.log(`  ‚ùå V√©rifications √©chou√©es: ${failedChecks}/${totalChecks}`);
  console.log(`  ‚ö†Ô∏è V√©rifications avec avertissements: ${warningChecks}/${totalChecks}`);

  console.log(`\nüõ°Ô∏è D√©tail des v√©rifications:`);
  securityChecks.forEach(check => {
    console.log(`  ${check.status} ${check.name} (${check.impact}) - ${check.description} [${check.score}/100]`);
  });

  console.log(`\nüéØ Score de s√©curit√© final: ${securityScore}/100`);

  if (securityScore >= 95) {
    console.log('üü¢ Niveau de s√©curit√©: EXCELLENT');
  } else if (securityScore >= 85) {
    console.log('üü° Niveau de s√©curit√©: TR√àS BON');
  } else if (securityScore >= 70) {
    console.log('üü† Niveau de s√©curit√©: BON');
  } else if (securityScore >= 50) {
    console.log('üü° Niveau de s√©curit√©: MOYEN');
  } else {
    console.log('üî¥ Niveau de s√©curit√©: FAIBLE');
  }

  console.log('\nüéâ Validation finale de s√©curit√© termin√©e !');
  
  return securityScore >= 85;
}

// Ex√©cution de la validation
const isSecure = validateFinalSecurity();
process.exit(isSecure ? 0 : 1);
