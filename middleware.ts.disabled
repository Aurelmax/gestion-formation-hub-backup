import { NextRequest, NextResponse } from 'next/server';

/**
 * Middleware de sécurité global pour l'application
 * Version simplifiée pour éviter les problèmes de résolution de modules
 */

const SECURITY_HEADERS = {
  'X-Content-Type-Options': 'nosniff',
  'X-Frame-Options': 'SAMEORIGIN',
  'X-XSS-Protection': '1; mode=block',
  'Referrer-Policy': 'origin-when-cross-origin',
  'X-DNS-Prefetch-Control': 'on',
} as const;

export function middleware(request: NextRequest) {
  const response = NextResponse.next();

  // Ajouter les headers de sécurité à toutes les réponses
  Object.entries(SECURITY_HEADERS).forEach(([key, value]) => {
    response.headers.set(key, value);
  });

  // Protection spécifique pour les routes admin
  if (request.nextUrl.pathname.startsWith('/admin')) {
    response.headers.set('X-Robots-Tag', 'noindex, nofollow, nosnippet, noarchive');
    response.headers.set('Cache-Control', 'no-cache, no-store, must-revalidate');
    response.headers.set('Pragma', 'no-cache');
    response.headers.set('Expires', '0');
  }

  // Protection pour les APIs sensibles
  if (request.nextUrl.pathname.startsWith('/api/')) {
    // En développement, logger les requêtes API
    if (process.env.NODE_ENV === 'development') {
      console.log('API Request:', {
        method: request.method,
        path: request.nextUrl.pathname,
        timestamp: new Date().toISOString()
      });
    }

    // Ajouter des headers spécifiques aux APIs
    response.headers.set('X-Content-Type-Options', 'nosniff');
    response.headers.set('X-API-Version', '1.0');
  }

  // Protection pour les fichiers statiques sensibles
  const sensitiveFiles = [
    '.env',
    '.env.local',
    '.env.production',
    'package.json',
    'package-lock.json',
    'yarn.lock',
    '.git',
    'node_modules',
    'prisma/schema.prisma'
  ];

  if (sensitiveFiles.some(file => request.nextUrl.pathname.includes(file))) {
    return new NextResponse(
      'Not Found',
      {
        status: 404,
        headers: SECURITY_HEADERS
      }
    );
  }

  return response;
}

/**
 * Configuration du middleware
 */
export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     */
    '/((?!_next/static|_next/image|favicon.ico).*)',
  ],
};