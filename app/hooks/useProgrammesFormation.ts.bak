/**
 * Hook personnalis√© pour g√©rer les programmes de formation
 * 
 * Ce hook fournit une interface compl√®te pour g√©rer les programmes de formation,
 * y compris le chargement, la cr√©ation, la mise √† jour, la suppression et la duplication
 * des programmes, ainsi que la gestion des cat√©gories et des filtres.
 * 
 * @example
 * // Utilisation de base
 * const {
 *   programmes,
 *   loading,
 *   error,
 *   fetchProgrammes,
 *   createProgramme,
 *   updateProgramme,
 *   deleteProgramme,
 *   duplicateProgramme,
 *   updateProgrammeStatus,
 *   categories,
 *   fetchCategories,
 *   getProgrammesByCategorie,
 *   getProgrammesByType
 * } = useProgrammesFormation();
 * 
 * // Charger les programmes et cat√©gories au montage du composant
 * useEffect(() => {
 *   fetchProgrammes();
 *   fetchCategories();
 * }, []);
 * 
 * // Filtrer les programmes par cat√©gorie
 * const programmesFiltres = getProgrammesByCategorie('categorie-id');
 * 
 * // Cr√©er un nouveau programme
 * const handleCreate = async () => {
 *   try {
 *     const nouveauProgramme = await createProgramme({
 *       code: 'NCODE',
 *       type: 'catalogue',
 *       titre: 'Nouveau programme',
 *       description: 'Description du programme',
 *       // ... autres champs requis
 *     });
 *     console.log('Programme cr√©√©:', nouveauProgramme);
 *   } catch (error) {
 *     console.error('Erreur lors de la cr√©ation:', error);
 *   }
 * };
 */
import { useState, useEffect } from "react";
import { useToast } from "@/hooks/use-toast";
import api from "@/services/api";
import { ApiError, ApiResponse } from "@/types";
import { z } from 'zod';

// Hook connect√© aux vraies APIs - Donn√©es mock√©es supprim√©es

// Interface pour les programmes de formation unifi√©s
export interface ProgrammeFormation {
  id: string;
  code: string;
  type: "catalogue" | "personnalise"; // Type du programme (catalogue ou personnalis√©)
  titre: string;
  description: string;
  
  // Champs descriptifs
  niveau: string;
  participants: string;
  duree: string;
  prix: string;
  objectifs: string[];
  prerequis: string;
  modalites: string;
  
  // Champs r√©glementaires
  publicConcerne: string;
  contenuDetailleJours: string;
  modalitesAcces: string;
  modalitesTechniques: string;
  modalitesReglement: string;
  formateur: string;
  ressourcesDisposition: string;
  modalitesEvaluation: string;
  sanctionFormation: string;
  niveauCertification: string;
  delaiAcceptation: string;
  accessibiliteHandicap: string;
  cessationAbandon: string;
  
  // Champs sp√©cifiques aux programmes personnalis√©s
  beneficiaireId: string | null; // ID de l'apprenant pour programmes personnalis√©s
  objectifsSpecifiques: string | null; // Objectifs adapt√©s pour programmes personnalis√©s
  positionnementRequestId: string | null; // Lien vers demande de positionnement
  programmeCatalogueId: string | null; // R√©f√©rence vers le programme catalogue source
  programmeCatalogue?: ProgrammeFormation; // Programme catalogue d'origine (si personnalis√©)
  
  // URL vers le programme HTML
  programmeUrl: string | null;
  programme?: string; // Contenu d√©taill√© du programme au format HTML ou texte
  contenuDetailleHtml?: string; // Contenu d√©taill√© au format HTML
  
  // Cat√©gorie
  categorieId: string | null;
  categorie?: {
    id: string;
    code: string;
    titre: string;
    description: string;
  };
  
  // Style
  pictogramme: string;
  
  // Statut
  estActif?: boolean;
  version?: string;
  typeProgramme?: string;
  
  // Dates
  createdAt: Date;
  updatedAt: Date;
}

// Sch√©ma de validation pour les programmes
const programmeSchema = z.object({
  code: z.string().min(1, 'Le code est requis'),
  titre: z.string().min(1, 'Le titre est requis'),
  description: z.string().optional(),
  type: z.enum(['catalogue', 'personnalise']),
  duree: z.number().int().positive('La dur√©e doit √™tre un nombre positif').optional(),
  prix: z.number().min(0, 'Le prix ne peut pas √™tre n√©gatif').optional(),
  categorieId: z.string().uuid('ID de cat√©gorie invalide').optional().nullable(),
  objectifs: z.array(z.string()).optional(),
  prerequis: z.string().optional(),
  modalites: z.string().optional(),
  estActif: z.boolean().default(true)
});

// Sch√©ma de validation pour les param√®tres de requ√™te
const queryParamsSchema = z.object({
  type: z.enum(['catalogue', 'personnalise']).optional(),
  version: z.string().regex(/^\d+$/).optional(),
  fields: z.string().optional().transform(fields => 
    fields ? fields.split(',').map(f => f.trim()) : []
  ),
  categorieId: z.string().uuid('ID de cat√©gorie invalide').optional(),
  estActif: z.preprocess(
    val => val === 'true' || val === true,
    z.boolean().optional()
  ),
  search: z.string().optional(),
  page: z.preprocess(
    val => Number(val) || 1,
    z.number().int().positive()
  ).default(1),
  limit: z.preprocess(
    val => Number(val) || 20,
    z.number().int().min(1).max(100)
  ).default(20)
});

type QueryParams = z.infer<typeof queryParamsSchema>;

export const useProgrammesFormation = () => {
  const [programmes, setProgrammes] = useState<ProgrammeFormation[]>([]);
  const [categories, setCategories] = useState<Array<{
    id: string;
    code: string;
    titre: string;
    description: string;
    ordre: number;
  }>>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const { toast } = useToast();

  const fetchProgrammes = async (params: Partial<QueryParams> = {}) => {
    try {
      console.log('üîÑ fetchProgrammes appel√© avec params:', params);
      setLoading(true);
      setError(null);

      // Valider les param√®tres
      const validatedParams = queryParamsSchema.safeParse(params);
      
      if (!validatedParams.success) {
        const errorMessage = 'Param√®tres de requ√™te invalides: ' + 
          validatedParams.error.errors.map(e => `${e.path.join('.')} - ${e.message}`).join(', ');
        
        toast({
          title: 'Erreur de validation',
          description: errorMessage
        });
        
        throw new Error(errorMessage);
      }

      const { data } = validatedParams;
      
      // Construire les param√®tres de requ√™te
      const queryParams = new URLSearchParams();
      
      if (data.type) queryParams.set('type', data.type);
      if (data.categorieId) queryParams.set('categorieId', data.categorieId);
      if (data.estActif !== undefined) queryParams.set('estActif', String(data.estActif));
      if (data.search) queryParams.set('search', data.search);
      if (data.page) queryParams.set('page', String(data.page));
      if (data.limit) queryParams.set('limit', String(data.limit));
      if (data.fields?.length) queryParams.set('fields', data.fields.join(','));

      const url = `/api/programmes-formation?${queryParams.toString()}`;
      console.log('üì° Appel API:', url);
      
      const response = await api.get(url, {
        validateStatus: (status) => status < 500
      });

      console.log('üì° R√©ponse API status:', response.status);
      console.log('üì° R√©ponse API data:', response.data);

      // G√©rer les erreurs HTTP
      if (response.status >= 400) {
        const errorMessage = response.data?.error || `Erreur ${response.status}`;
        console.error('‚ùå Erreur HTTP:', errorMessage);
        throw new Error(errorMessage);
      }

      // Mettre √† jour le cache local
      const programmesData = response.data.data || [];
      console.log('üíæ Mise √† jour programmes:', programmesData.length, 'programmes');
      setProgrammes(programmesData);
      
      return response.data;
      
    } catch (error) {
      const errorMessage = error instanceof Error 
        ? error.message 
        : 'Une erreur inattendue est survenue';
      
      toast({
        title: 'Erreur',
        description: `Impossible de charger les programmes: ${errorMessage}`
      });
      
      setError(errorMessage);
      throw error;
      
    } finally {
      setLoading(false);
    }
  };

  const createProgramme = async (data: Omit<ProgrammeFormation, 'id' | 'createdAt' | 'updatedAt'>) => {
    try {
      setLoading(true);
      
      // Valider les donn√©es avant envoi
      const validatedData = programmeSchema.parse(data);
      
      const response = await api.post('/api/programmes-formation', validatedData);
      
      // Mettre √† jour le cache local
      setProgrammes(prev => [...prev, response.data]);
      
      toast({
        title: 'Succ√®s',
        description: 'Le programme a √©t√© cr√©√© avec succ√®s'
      });
      
      return response.data;
      
    } catch (error) {
      let errorMessage = 'Erreur lors de la cr√©ation du programme';
      
      if (error instanceof z.ZodError) {
        errorMessage = 'Donn√©es invalides: ' + 
          error.errors.map(e => `${e.path.join('.')} - ${e.message}`).join(', ');
      } else if (error.response?.data?.error) {
        errorMessage = error.response.data.error;
      }
      
      toast({
        title: 'Erreur',
        description: errorMessage
      });
      
      throw error;
    } finally {
      setLoading(false);
    }
  };

  const updateProgramme = async (id: string, data: Partial<ProgrammeFormation>) => {
    try {
      setLoading(true);
      
      // Valider les donn√©es avant envoi
      const validatedData = programmeSchema.partial().parse(data);
      
      const response = await api.patch(`/api/programmes-formation/${id}`, validatedData);
      
      // Mettre √† jour le cache local
      setProgrammes(prev => 
        prev.map(programme => 
          programme.id === id ? { ...programme, ...response.data } : programme
        )
      );
      
      toast({
        title: 'Succ√®s',
        description: 'Le programme a √©t√© mis √† jour avec succ√®s'
      });
      
      return response.data;
      
    } catch (error) {
      let errorMessage = 'Erreur lors de la mise √† jour du programme';
      
      if (error instanceof z.ZodError) {
        errorMessage = 'Donn√©es invalides: ' + 
          error.errors.map(e => `${e.path.join('.')} - ${e.message}`).join(', ');
      } else if (error.response?.data?.error) {
        errorMessage = error.response.data.error;
      }
      
      toast({
        title: 'Erreur',
        description: errorMessage
      });
      
      throw error;
    } finally {
      setLoading(false);
    }
  };

  /**
   * R√©cup√®re la liste des cat√©gories de programmes depuis l'API
   * @returns {Promise<void>}
   * 
   * @example
   * // Charger les cat√©gories
   * await fetchCategories();
   * // Utiliser les cat√©gories charg√©es
   * console.log(categories);
   */
  const fetchCategories = async () => {
    try {
      setLoading(true);
      const response = await api.get('/api/categories');
      setCategories(response.data);
      return response.data;
    } catch (error) {
      console.error('Erreur lors du chargement des cat√©gories:', error);
      toast({
        title: 'Erreur',
        description: 'Impossible de charger les cat√©gories',
      });
      return [];
    } finally {
      setLoading(false);
    }
  };

  /**
   * Supprime un programme
   * @param {string} id - ID du programme √† supprimer
   * @returns {Promise<void>}
   * 
   * @example
   * try {
   *   await deleteProgramme('123');
   *   console.log('Programme supprim√©');
   * } catch (error) {
   *   console.error('Erreur:', error);
   * }
   */
  const deleteProgramme = async (id: string) => {
    try {
      const programme = programmes.find(p => p.id === id);
      await api.delete(`/api/programmes-formation/${id}`);
      setProgrammes(prev => prev.filter(p => p.id !== id));
      toast({
        title: 'Programme supprim√©',
        description: `Programme "${programme?.titre}" supprim√© avec succ√®s`,
      });
    } catch (error) {
      console.error("Erreur lors de la suppression:", error);
      toast({
        title: 'Erreur',
        description: 'Impossible de supprimer le programme',
      });
      throw error;
    }
  };

  /**
   * Duplique un programme existant avec un nouveau code
   * @param {string} id - ID du programme √† dupliquer
   * @param {Partial<ProgrammeFormation>} modificationData - Champs √† modifier pour la copie
   * @returns {Promise<ProgrammeFormation>} Le nouveau programme cr√©√©
   * 
   * @example
   * try {
   *   const copie = await duplicateProgramme('123', { code: 'WEB-101-COPY' });
   *   console.log('Copie cr√©√©e:', copie);
   * } catch (error) {
   *   console.error('Erreur:', error);
   * }
   */
  const duplicateProgramme = async (id: string, modificationData: Partial<ProgrammeFormation>) => {
    try {
      console.log('duplicateProgramme appel√© avec id:', id, 'et modifications:', modificationData);
      
      // R√©cup√©rer le programme source
      const sourceProgramme = programmes.find(p => p.id === id);
      if (!sourceProgramme) {
        console.error('Programme source introuvable avec id:', id);
        throw new Error('Programme source introuvable');
      }
      console.log('Programme source trouv√©:', sourceProgramme);

      // Cr√©er un nouveau programme bas√© sur le programme source avec les modifications
      const duplicateData = {
        ...sourceProgramme,
        ...modificationData,
        id: undefined // Le backend va g√©n√©rer un nouvel ID
      };
      console.log('Donn√©es pour duplication pr√©par√©es:', duplicateData);

      // Essayons d'abord une approche alternative si l'API originale √©choue
      let response;
      try {
        // Approche 1: Endpoint sp√©cifique de duplication
        console.log('Tentative d\'appel API 1: /api/programmes-formation/duplicate');
        response = await api.post('/api/programmes-formation/duplicate', { 
          sourceId: id,
          newData: duplicateData
        });
      } catch (dupError) {
        console.warn('Premi√®re tentative √©chou√©e, essai avec cr√©ation standard...', dupError);
        
        // Approche 2: Cr√©er un nouveau programme avec les donn√©es dupliqu√©es
        console.log('Tentative d\'appel API 2: /api/programmes-formation (cr√©ation standard)');
        const newProgrammeData = {
          ...duplicateData,
          id: undefined,
          createdAt: undefined,
          updatedAt: undefined
        };
        response = await api.post('/api/programmes-formation', newProgrammeData);
      }

      const duplicatedProgramme = response.data;
      console.log('Programme dupliqu√© avec succ√®s:', duplicatedProgramme);
      
      setProgrammes(prev => [duplicatedProgramme, ...prev]);

      toast({
        title: 'Programme dupliqu√©',
        description: `Programme "${duplicatedProgramme.titre}" cr√©√© avec succ√®s`,
      });

      return duplicatedProgramme;
    } catch (error) {
      console.error('Erreur lors de la duplication:', error);
      toast({
        title: 'Erreur',
        description: 'Impossible de dupliquer le programme',
      });
      throw error;
    }
  };

  /**
   * Active ou d√©sactive un programme
   * @param {string} id - ID du programme
   * @param {boolean} estActif - Nouvel √©tat d'activation
   * @returns {Promise<void>}
   * 
   * @example
   * // D√©sactiver un programme
   * await updateProgrammeStatus('123', false);
   */
  const updateProgrammeStatus = async (id: string, estActif: boolean) => {
    console.log('updateProgrammeStatus appel√© avec id:', id, 'estActif:', estActif);
    try {
      // R√©cup√©rer le programme pour les logs
      const programme = programmes.find(p => p.id === id);
      console.log('Programme trouv√© pour mise √† jour de statut:', programme);
      
      // Essayer plusieurs approches en cas d'√©chec
      let response;
      try {
        // Approche 1: Endpoint d√©di√© au statut
        console.log('Tentative API 1: PATCH /api/programmes-formation/:id/status');
        response = await api.patch(`/api/programmes-formation/${id}/status`, { estActif });
      } catch (statusError) {
        console.warn('Premi√®re tentative √©chou√©e, essai avec mise √† jour standard...', statusError);
        
        // Approche 2: Update standard
        console.log('Tentative API 2: PUT /api/programmes-formation/:id (update standard)');
        response = await api.put(`/api/programmes-formation/${id}`, { estActif });
      }
      
      const updated = response.data;
      console.log('Programme mis √† jour avec succ√®s:', updated);
      
      // Mettre √† jour l'√©tat local avant la notification
      setProgrammes(prev => prev.map(p => (p.id === id ? updated : p)));
      console.log('Liste des programmes mise √† jour');
      
      toast({
        title: estActif ? 'Programme activ√©' : 'Programme d√©sactiv√©',
        description: `Le statut du programme a √©t√© mis √† jour`,
      });
      
      return updated;
    } catch (error) {
      console.error('Erreur lors de la mise √† jour du statut:', error);
      toast({
        title: 'Erreur',
        description: 'Impossible de mettre √† jour le statut du programme',
      });
      throw error;
    }
  };

  /**
   * Filtre les programmes par cat√©gorie
   * @param {string | null} categorieId - ID de la cat√©gorie (null pour tout afficher)
   * @returns {ProgrammeFormation[]} Programmes filtr√©s
   * 
   * @example
   * // Filtrer par cat√©gorie
   * const programmesFiltres = getProgrammesByCategorie('categorie-123');
   * // Afficher tous les programmes
   * const tousLesProgrammes = getProgrammesByCategorie(null);
   */
  const getProgrammesByCategorie = (categorieId: string | null): ProgrammeFormation[] => {
    return programmes.filter(prog => prog.categorieId === categorieId);
  };

  /**
   * Filtre les programmes par type (catalogue ou personnalis√©)
   * @param {'catalogue' | 'personnalise' | null} type - Type de programme
   * @returns {ProgrammeFormation[]} Programmes filtr√©s
   * 
   * @example
   * // Filtrer les programmes catalogue
   * const catalogue = getProgrammesByType('catalogue');
   */
  const getProgrammesByType = (type: 'catalogue' | 'personnalise' | null): ProgrammeFormation[] => {
    return programmes.filter(prog => prog.type === type);
  };

  /**
   * Cr√©e un programme personnalis√© √† partir d'un programme catalogue
   * @param {string} programmeCatalogueId - ID du programme catalogue source
   * @param {string} beneficiaireId - ID de l'apprenant b√©n√©ficiaire
   * @param {Partial<ProgrammeFormation>} personnalisations - Adaptations sp√©cifiques
   * @returns {Promise<ProgrammeFormation>} Programme personnalis√© cr√©√©
   * 
   * @example
   * const programmePerso = await createProgrammePersonnalise('cat-123', 'app-456', {
   *   objectifsSpecifiques: 'Objectifs adapt√©s pour cet apprenant',
   *   duree: '2 jours au lieu de 3'
   * });
   */
  const createProgrammePersonnalise = async (
    programmeCatalogueId: string, 
    beneficiaireId: string,
    personnalisations: Partial<ProgrammeFormation> = {}
  ) => {
    try {
      const programmeCatalogue = programmes.find(p => p.id === programmeCatalogueId);
      if (!programmeCatalogue) {
        throw new Error('Programme catalogue introuvable');
      }

      if (programmeCatalogue.type !== 'catalogue') {
        throw new Error('Seuls les programmes catalogue peuvent √™tre personnalis√©s');
      }

      const programmePersonnalise = {
        ...programmeCatalogue,
        type: 'personnalise' as const,
        programmeCatalogueId,
        beneficiaireId,
        code: `${programmeCatalogue.code}-PERSO-${Date.now()}`,
        titre: `${programmeCatalogue.titre} (Personnalis√©)`,
        estVisible: false, // Les programmes personnalis√©s ne sont pas visibles publiquement
        ...personnalisations,
        id: undefined, // Le backend g√©n√©rera un nouvel ID
        createdAt: undefined,
        updatedAt: undefined
      };

      return await createProgramme(programmePersonnalise);
      
    } catch (error) {
      toast({
        title: 'Erreur',
        description: 'Impossible de cr√©er le programme personnalis√©'
      });
      throw error;
    }
  };

  // Chargement initial des donn√©es
  useEffect(() => {
    const loadData = async () => {
      console.log('üîÑ Hook useProgrammesFormation - Chargement initial des donn√©es...');
      try {
        console.log('üì° Appel fetchProgrammes...');
        const result = await fetchProgrammes();
        console.log('üì° R√©sultat fetchProgrammes:', result);
        console.log('üì° Appel fetchCategories...');
        await fetchCategories();
        console.log('‚úÖ Chargement initial termin√©');
      } catch (error) {
        console.error('‚ùå Erreur lors du chargement initial:', error);
      }
    };
    loadData();
  }, []);

  return {
    programmes,
    categories,
    loading,
    error,
    fetchProgrammes,
    refreshProgrammes: fetchProgrammes, // Alias pour la compatibilit√©
    createProgramme,
    updateProgramme,
    fetchCategories,
    deleteProgramme,
    duplicateProgramme,
    updateProgrammeStatus,
    getProgrammesByCategorie,
    getProgrammesByType,
    createProgrammePersonnalise
  };
};
